demo()
is.things
recursion()
load(url("http://bit.ly/dasi_gss_data"))
A = load(url("http://bit.ly/dasi_gss_data"))
A
A[1,2]
clear
cls
a <-'available.packages()'
a <-available.packages()
a
head(rownames(a), 3)
install.packages("slidify")
install.packages("slidify")
install.packages("slidify")
install.packages("KernSmooth")
library(KernSmooth)
?mean
library(datasets)
data(iris)
?iris
mean(iris, Species=="virginica")
?mean
myIris <- subset(iris, Species="virginica")
myIris
head(myIris)
mean(myIris, Species)
mean(myIris.species)
dim(myIris)
?subset
myIris <- subset(iris, select, Species = virginica)
myIris <- subset(iris, select, Species = "virginica")
myIris <- subset(iris, Species == virginica)
myIris <- subset(iris, Species == "virginica"")
)
)
exit
stop
myIris
""
myIris <- subset(iris, Species == "virginica")
head(myIris)
dim(myIris)
myVirginica <- subset(myIris, Sepal.Length)
mean(myIris[1])
mean(myIris[,1])
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
apply(iris, 1, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
82.63636-209.21429
debug(ls)
ls()
quit
exit
stop
help
q
q
quit
help
cont
help
quit
Q
?debug
myMatrix <- matrix(3,3,3)
myMatrix
inv(myMatrix)
inverse(myMatrix)
myMatrix.inverse()
solve(myMatrix)
?solve
myMatrix <- matrix(c(1,2,3,4), nrow=2, ncol=2)
solve(myMatrix)
myMatrix
setwd("~/GitHub/ProgrammingAssignment2")
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
amatrix = makeVector(matrix(1:4, 2))
amatrix = makeCache(matrix(1:4, 2))
amatrix = makecache(matrix(1:4, 2))
amatrix = makeCacheMatrix(matrix(1:4, 2))
cacheSolve(amatrix)
cacheSolve(amatrix)
amatrix$get()
myCachedMatrix <- makeCacheMatrix(matrix(c(0, -5, -4, 0), nrow=2, ncol=2, byrow=TRUE))
myCachedMatrix$getMatrix()
install.packages("magic")
library(magic)
A<-magic(5)
A
B<-makeCacheMatrix(A)
names(B)
B$getmat()
B$getinverse()
B$getinverse()
cachesolve(B)
mm <- matrix(rnorm(16), nrow=4)
yy<-makeCacheMatrix(mm)
zz<-cacheSolve(yy)
zz
mm
c <- matrix(c(1,0,1,2,4,0,3,5,6),3,3)
b <- makeCacheMatrix(c)
cacheSolve(b)
cacheSolve(b)
b <- makeCacheMatrix(c)
cacheSolve(b)
b <- makeCacheMatrix(c)
b
b
b <- makeCacheMatrix(c)
b <- makeCacheMatrix(c)
c
b$getinverse()
amatrix = makeCacheMatrix(matrix(1:4, 2))
amatrix$getinverse()
amatrix$solve()
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
amatrix = makeCacheMatrix(matrix(1:4, 2))
cacheSolve(amatrix)
amatrix$getinverse()
amatrix$get()
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(1:4, 2))
cacheSolve(amatrix)
amatrix$getinverse()
amatrix$get()
